openapi: 3.0.3
info:
  title: Post API
  description: API for managing social media posts
  version: 1.0.0
  contact:
    name: Social Media Service Team
    email: hi@fanzru.dev

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/posts:
    post:
      security:
        - bearerAuth: []
      summary: Create a new post
      description: Create a new social media post with image upload
      tags:
        - Posts
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - caption
                - image
              properties:
                caption:
                  type: string
                  minLength: 1
                  maxLength: 1000
                  example: "Beautiful sunset today! ðŸŒ…"
                image:
                  type: string
                  format: binary
                  description: Image file (PNG, JPG, JPEG, BMP)
      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "400":
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "413":
          description: Payload too large - image too big
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
    get:
      summary: Get all posts
      description: Get all posts sorted by comment count with pagination
      tags:
        - Posts
      parameters:
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: string
            example: "10"
        - name: limit
          in: query
          description: Number of posts to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        "200":
          description: Posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"

  /api/posts/{id}:
    get:
      summary: Get post by ID
      description: Get a specific post by its ID
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          description: Post retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
    put:
      security:
        - bearerAuth: []
      summary: Update post
      description: Update a post (only the creator can update)
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePostRequest"
      responses:
        "200":
          description: Post updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "400":
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "403":
          description: Forbidden - not the post creator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
    delete:
      security:
        - bearerAuth: []
      summary: Delete post
      description: Delete a post (only the creator can delete)
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: Post ID
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "403":
          description: Forbidden - not the post creator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"

  /api/posts/user/{userId}:
    get:
      summary: Get user posts
      description: Get all posts by a specific user
      tags:
        - Posts
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: integer
            format: int64
            example: 1
        - name: cursor
          in: query
          description: Cursor for pagination
          required: false
          schema:
            type: string
            example: "2024-01-01T00:00:00Z"
        - name: limit
          in: query
          description: Number of posts to return (max 100)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
      responses:
        "200":
          description: User posts retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from login endpoint"

  schemas:
    Post:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        caption:
          type: string
          example: "Beautiful sunset today! ðŸŒ…"
        image_path:
          type: string
          example: "post_1640995200000000000.jpg"
        image_url:
          type: string
          example: "https://social-media-images.s3.amazonaws.com/post_1640995200000000000.jpg"
        creator_id:
          type: integer
          format: int64
          example: 1
        creator_name:
          type: string
          example: "John Doe"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          example: null
        comment_count:
          type: integer
          format: int64
          example: 5
        comments:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 1
              content:
                type: string
                example: "Great post! Love the sunset ðŸŒ…"
              creator_name:
                type: string
                example: "Jane Smith"
              created_at:
                type: string
                format: date-time
                example: "2024-01-01T00:00:00Z"
          maxItems: 2
          description: "Last 2 comments on the post"

    UpdatePostRequest:
      type: object
      required:
        - caption
      properties:
        caption:
          type: string
          minLength: 1
          maxLength: 1000
          example: "Updated caption for my post"

    PostListResponse:
      type: object
      properties:
        posts:
          type: array
          items:
            $ref: "#/components/schemas/Post"
        cursor:
          type: string
          nullable: true
          example: "10"
          description: "Cursor for next page"
        has_more:
          type: boolean
          example: true
          description: "Whether there are more posts"

    StandardResponse:
      type: object
      properties:
        code:
          type: string
          enum:
            - SUCCESS
            - FAILED
            - BAD_REQUEST
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - CONFLICT
            - INTERNAL_SERVER_ERROR
          example: "SUCCESS"
        message:
          type: string
          example: "Operation completed successfully"
        errors:
          type: array
          items:
            type: string
          example: []
        serverTime:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        requestId:
          type: string
          example: "req_123456789"
        data:
          type: object
          description: "Response data (varies by endpoint)"
