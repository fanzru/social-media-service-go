openapi: 3.0.3
info:
  title: Social Media Service API
  description: API for social media service
  version: 1.0.0
  contact:
    name: Social Media Service Team
    email: hi@fanzru.dev

servers:
  - url: http://localhost:8080
    description: Development server

paths:
  /api/account/register:
    post:
      summary: Register a new account
      description: Create a new user account with name, email, and password
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Account created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "400":
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "409":
          description: Conflict - email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"

  /api/account/login:
    post:
      summary: Login to account
      description: Authenticate user with email and password
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "400":
          description: Bad request - validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"

  /api/account/profile:
    get:
      security:
        - bearerAuth: []
      summary: Get account profile
      description: Get the profile of the authenticated user
      tags:
        - Account
      responses:
        "200":
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "401":
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StandardResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "JWT token obtained from login endpoint"

  schemas:
    Account:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        created_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        deleted_at:
          type: string
          format: date-time
          nullable: true
          example: null

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john@example.com"
        password:
          type: string
          example: "password123"

    LoginResponse:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          format: int64
          example: 3600

    StandardResponse:
      type: object
      properties:
        code:
          type: string
          enum:
            - SUCCESS
            - FAILED
            - BAD_REQUEST
            - UNAUTHORIZED
            - FORBIDDEN
            - NOT_FOUND
            - CONFLICT
            - INTERNAL_SERVER_ERROR
          example: "SUCCESS"
        message:
          type: string
          example: "Operation completed successfully"
        errors:
          type: array
          items:
            type: string
          example: []
        serverTime:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        requestId:
          type: string
          example: "req_123456789"
        data:
          type: object
          description: "Response data (varies by endpoint)"
